/// Author and Copyright 2020 Johannes Bernhard Steffens

Symbolic language to describe a graph of operators on holors.

================================================================================
Development Codenames and Stages

  bsym (Jul 2019) First ideas of symbolic graph language, experimented with structure, virtual machine,
  bhgp (holorgraph): Successor of bsym (Sep 2019)
  bhcl (holorcell):  Successor of bhgp (Nov 2019)

  As dedicated Library:
  haptive (former holorcell): Continued development; Functional and trainable feed-forward-networks, co-developed beth-bhvm
    'Haptive'' is currently name of choice for the graph-language

  lion: successor of haptive (Dec 2019): functional recurrent networks, improved dedicated frames, co-developed beth-bhvm, beth-bhpt
    Lion-Goals:
      - develop ECI-concept
      - finalize language concepts
      - finalize recurrent (cyclic) graphs and training

  opal: successor of lion (Jul 2020)
    Opal-Goals:
     - use a builder to construct network structure
     - use (local) contexts inside builder instead of global context instances
     - simplify some features with contexts
     - use beth_prsg for all randomizations
     - global naming scheme for holors
     - migrating sub-graphs (e.g. extract a trained sub graph and use it in a different network either as constant or for continued training)

================================================================================
Syntax

================================================================================
MLP

cell layer( y <- hidden_nodes, a )
{
    w = adaptive <: random <: ( hidden_nodes [ dimof( a ) [ # );
    b = adaptive <: ( hidden_nodes [ 0 );
    y = b + w ** a;
};

cell mlp( y <- a )
{
    l1 = layer( 10, a );
    l2 = layer( 20, relu( a ) );
    l3 = layer(  1, relu( a ) );
    y = tanh( l3.y );
};

================================================================================
LSTM

cell layer( co, ho <- dim_h, x, ci, hi )
{
    // adaptive holors
    w_fx = adaptive : random( dim_h [ dimof( x ) [ # );
    w_fh = adaptive : random( dim_h [ dimof( x ) [ # );
    w_ix = adaptive : random( dim_h [ dimof( x ) [ # );
    w_ih = adaptive : random( dim_h [ dimof( x ) [ # );
    w_ox = adaptive : random( dim_h [ dimof( x ) [ # );
    w_oh = adaptive : random( dim_h [ dimof( x ) [ # );
    w_qx = adaptive : random( dim_h [ dimof( x ) [ # );
    w_qh = adaptive : random( dim_h [ dimof( x ) [ # );

    b_f = adaptive( dim_h [ 0 );
    b_i = adaptive( dim_h [ 0 );
    b_o = adaptive( dim_h [ 0 );
    b_q = adaptive( dim_h [ 0 );

    v_f = sigm( ( w_fx ** x ) + ( w_fh ** hi ) + b_f );
    v_i = sigm( ( w_ix ** x ) + ( w_ih ** hi ) + b_i );
    v_o = sigm( ( w_ox ** x ) + ( w_oh ** hi ) + b_o );
    v_q = tanh( ( w_qx ** x ) + ( w_qh ** hi ) + b_q );

    co  = ( v_f * ci ) + ( v_i * v_q );
    v_d = tanh( co );
    ho  = ( v_o * v_d );
};

cell lstm( y <- dim_h, x )
{
    adaptive w_r = random( dim_h [ dimof( x ) [ # );
    adaptive b_r = dim_h [ #;

    cyclic c = dim_h [ 0;
    cyclic h = dim_h [ 0;

    l1 = layer( dim_h, x, ci = c, hi = h );

    h = l1.ho; // updating a cyclic value ends its scope
    c = l1.co;

    y = tanh( w_r * l1.ho + b_r );
}

g_out = lstm( dim_h = 200, x = g_in ).y;

- parse into cell
- cell: tree of cell
- cell: inputs, outputs, body
- definition: stand-alone node with identifier
- operation: cell embedded in a cell
- once a cell is complete, data types can be finalized


================================================================================
Semantic Cell Concept:
A semantic graph communicates with the objects outside its body through input an output channels.
All links of a graph 'x' to outside objects the node must pass though an input channel of 'x'.
Inside objects may not be referenced directly by outside objects.
A graph adhering to this concept is called 'cell'
A construction of a new graph must conclude with converting it to a cell.
Cells can be used as objects for constructing new graphs.

Static Links:
Defined links of an input channel of a semantic graph are never changed or freed again.
Different use cases of a graph are achieved by creating graph-copies and assigning links of those copies differently.

Binary operators:
Binary operators have a priority-level. Higher priority is resolved before lower priority.

Available binary operators
Symbol  Notation Priority  Type
 :      Infix      6     Constructive Concatenation
::      Infix      8     Conservative Concatenation
<:      Infix            Cell Catenation
 [      Infix     21     order-increment bin operator (l-value: dim). (Yielding) Example: 2[# = (#:#), 2[2[# = (#:#):(#:#)
 ]      Infix     20     order-decrement bin operator (r-value: idx). Example: (1:2:3)]1 = 2
 +      Infix      8     (ECI) addition
 -      Infix      8     (ECI) subtraction
 *      Infix     10     (ECI) multiplication
 /      Infix     10     (ECI) division
 ^      Infix     12     (ECI) power
**,     Infix     10     holor-product for holors up to order 2; transposition state is considered
*~      Infix     10     convolution?

Unary operators
-     Prefix       8     negates holor
~     Postfix     12     toggles transposition state (represents a reinterpret cast)
      (we should remove this again in favor of htp cast-operator)

Holors
  #   Vacant scalar
  7   Determined Scalar

================================================================================
Dendpass-Algorithm:
specific method to compute the local gradient via automatic differentiation
using reverse accumulation to backpropagate gradients:
- Each node holds a gradient holor of same shape as its output holor
- The gradient holor represents the gradient with respect to the last input given the current state of the network.
- The backpass algorithm for a specific node computes the gradient through a specific node-channel and adds it to (accumulates)
  the gradient of the node linked to the input channel. This step is done by s singe virtual operation.
- The backpass procedure is compiled by recursively passing each node starting from the adaptive node downward through
  all downlinks.


================================================================================
Possible name ?
   haptive (synonym to haptic) (no trademark (!) )
   holocell
   holorcell  (unused)
   holorframe (unused, term does not yet exist)
   holograph
   holorgraph
   holornova  (unused)
   helix   (mathematics, biology, earring, IT corporation)
   haptor  (biology: flatworm organ)
   hoptinet
   hoptivnet (unused)
   haptivnet (unused)
   adahonet  (unused)
   haptivscript (unused)
   haptivdown   // wordplay on markdown

TODO:
   - (done) Store the cyclic update to a hidden holor associated with the cyclic node
   - (done) After regular axon pass, copy all hidden cyclic holors to regular cyclic axons
   - (done) Disallow explicit use of a cyclic variable after it has been updated. (This prevents surprising syntax)
   - (done) Add list of reserved keywords (not usable for variables)
   - (done) specify type by appending f2 or f3 to literal.
   - (done) implement operator volof  (returning the volume as constant scalar)
   - (done) add cast operator 'reshape( new_shape, holor )' converting the shape of a holor
   - (done) rename lgst -> sigm
   - switch to er_t based error handling
   - expand matrix multiplication to involve higher order holors using an eci-like-approach (elements being 2x2 matrices)
   - implement ar3-convolution operator
   - bhpt:
          random seed for network creation is part of builder and can (optionally) be changed via builder feature
          tutor, frame: frame should assume builder is part of tutor
   - create a dedicated compiler; the compiler holds the context for a given build. (No more system wide global context)
   - cells and nodes (via fork) reference the compiler's context instead of using the system global context
   - the state of cyclic holors should be retained when shelving (just like adaptive holors)
   - Reduction operators: min, max, sum, avg, ... should apply only to the last dimension; use 'r' as prefix? (rmin, rmax, ...)
      these operators would then be suitable for pooling
   - bhpt-frame:
        - create log file(s)
        - create a plot with refresh while running
   - random numbers
       - implement better generators than lcg or xsg (kiss?)
       - introduce a dedicated randomizer in root:
              can be seeded and reset (concurrently)
              is accessible via nop_context
        - vop srand should be arity2 accepting a const and non-const on channel0


