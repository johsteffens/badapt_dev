#! ../../bin/Release/badapt_dev
<badapt_trainer_main_s>
    problem:
        <badapt_problem_sine_random_s>
            input_size:<sz_t>32</>
            rval:<u2_t>1234</>
            pos_tgt:<f3_t>0.9</>
            neg_tgt:<f3_t>-0.9</>
            preferred_loss:<badapt_loss_l2_s>
            </>
        </>

    builder:
        <lion_adaptive_builder_s>
            src: <st_s>
            "
                cell ( y <- a )
                {
                    cell layer( y <- hidden_nodes, a )
                    {
                        adaptive w = constof( rand( hidden_nodes [ dimof( a ) [ f2_t( # ) ) );
                        adaptive b = hidden_nodes [ f2_t( 0 );
                        q = w ** a + b;

                        //adaptive c = 0.5;

                        // switch between activation functions
                        //y = c * tanh( q ) + ( 1 - c ) * relu( q );
                        y = q;
                    };

                    y =	tanh <: layer( 1 ) <: relu_leaky <: layer( 16 ) <: relu_leaky <: layer( 16 ) <: relu_leaky <: layer( 16, f2_t( a ) );
                    //y =	layer( 1 ) <: layer( 16 ) <: layer( 16 ) <: layer( 16, a );
                }
            "           </>

            in_size :<sz_t>32</>
            out_size:<sz_t>1</>

            dynamics:<badapt_dynamics_std_s>
                epsilon:<f3_t>0.001</>
                lambda_l1:<f3_t>0</>
                lambda_l2:<f3_t>0</>
            </>
        </>

    guide:
        <badapt_guide_std_s>
        </>

    trainer:
        <badapt_trainer_batch_s>
            loss:<></>
            batch_size:<sz_t>10000</>
            batch_cycles_per_fetch:<sz_t>1</>
            fetch_cycles_per_iteration:<sz_t>10</>
            valid_size:<sz_t>10000</>
            max_iterations:<sz_t>10</>
        </>

</>

