#! ../bin/Release/badapt_dev
<badapt_trainer_main_s>
    problem:
        <badapt_problem_sine_random_s>
            input_size:<sz_t>32</>
            rval:<u2_t>1234</>
            pos_tgt:<f3_t>0.9</>
            neg_tgt:<f3_t>-0.9</>
            preferred_loss:<badapt_loss_l2_s>
            </>
        </>

    builder:
        <badapt_builder_mlp_funnel_s>
            input_size:<sz_t>0</>
            input_kernels:<sz_t>16</>
            output_kernels:<sz_t>1</>
            layers:<sz_t>4</>
            kernels_rate:<f3_t>0</>
            random_seed:<u2_t>124</>
            dynamics:<badapt_dynamics_std_s>
                epsilon:<f3_t>0.001</>
                lambda_l1:<f3_t>0</>
                lambda_l2:<f3_t>0</>
            </>
            arr_layer_activator:<badapt_arr_layer_activator_s>
                <badapt_layer_activator_s>
                    layer:<sz_t>0</>
                    activator:<badapt_activator_plain_s>
                        activation:<badapt_activation_leaky_relu_s>
//                        activation:<badapt_activation_tanh_s>
                        </>
                    </>
                </>
                <badapt_layer_activator_s>
                    layer:<sz_t>-1</>
                    activator:<badapt_activator_plain_s>
                        activation:<badapt_activation_tanh_s>
                        </>
                    </>
                </>
            </>
        </>


    guide:
        <badapt_guide_std_s>
        </>

    trainer:
        <badapt_trainer_batch_s>
            loss:<></>
            batch_size:<sz_t>10000</>
            batch_cycles_per_fetch:<sz_t>1</>
            fetch_cycles_per_iteration:<sz_t>10</>
            valid_size:<sz_t>10000</>
            max_iterations:<sz_t>10</>
        </>

</>

