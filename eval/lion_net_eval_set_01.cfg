<lion_net_eval_set_s>
    param: <lion_net_eval_param_s>
        verbosity: -1
    </>

    arr: <lion_net_eval_arr_s>

    <lion_net_eval_set_s> param: <lion_net_eval_param_s> verbosity: -1 name: "HOLOR LITERAL" </> arr: <lion_net_eval_arr_s>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y<-)     {y=1:1;};"             out:"(1:1)"       </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y<-)     {y=1[1::2[2;};"        out:"(1:2:2)"     </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y<-)     {y=2[2;};"             out:"(2:2)"       </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y<-)     {y=2[2[0;};"           out:"(0:0):(0:0)" </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y<-)     {y=((1:2):(4:5))]1;};" out:"(4:5)"       </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"(y, z <-) {y=1; z=2;};"          out:"1,2"         </> </>
    </> </>

    <lion_net_eval_set_s> param: <lion_net_eval_param_s> name: "HOLOR SYNTAX" verbosity: -1 </> arr: <lion_net_eval_arr_s>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = a + b; };"                 in:"1:1, 2:2"     out: "3:3" </>  </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y,z <- a,b ) { y=a+b; z=b-a; };"              in:"1:1, 2:2"     out: "3:3, 1:1" </>  </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = a * b; };"                 in:"1:1, 2:2"     out: "2:2" </>  </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = a:b:2[2; };"               in:"2[1, 2:3"     out:"(1:1):(2:3):(2:2)"  </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = (a:b):(1:1); };"           in:"1:2, 2:3"     out:"(1:2):(2:3):(1:1)"  </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = (a:b)]1; };"               in:"1:2, 2:3"     out:"(2:3)" </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a )   { y = (2[2[a); };"               in:"1:2:3"        out: "((1:2:3):(1:2:3)):((1:2:3):(1:2:3))"  </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a )   { y = a + a + 1 + #; };"         in:"1"            out:"3" </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src:"( y   <- a,b ) { y = b+a/( a~**a )^( 1/2 ); };" in:"(1:1), (1:1)" out:"(1.70711:1.70711)"  </> </>
    </> </>

    <lion_net_eval_set_s> param: <lion_net_eval_param_s> name: "HOLOR SYNTAX2" verbosity: -1 epsilon: 1E-3 max_dev: 1E-2 </> arr: <lion_net_eval_arr_s>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a = 2[# ) { y = a; };" in:"f2_t(1:2)"          out:"f3_t(1:2)" </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a ) { y = a; };"       in:"f2_t((1:2):(3:4))"  out:"f2_t((1:2):(3:4))"  </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a ) { y = exp( lgst((-(a-3)*5*a+5)+16 )+lgst(-1)); };" in: "4"  out:"2.718281828" </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a ) { y = a~~; };"     in: "f2_t((1:2):(3:4))"     out:"f2_t((1:2):(3:4))"  </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a ) { y = ( a~ ** a ); };"   in:  "(1:2):(3:4)"    out: "(10:14):(14:20)"   </> </>
        <lion_net_eval_frame_s> param: <lion_net_eval_param_s> src: "( y <- a, b ) { y = a / ( b + a ); };" in: "1:2, f2_t(2)" out: "0.33333:0.5"       </> </>
    </> </>

    <lion_net_eval_frame_s> param: <lion_net_eval_param_s>
        name: "ACKERMANN" verbosity: -1
        src:
        "
            cell ( y <- )
            {
                cell ack( y <- n, m )
                {
                    y =
                      if     ( n == 0 ) then m + 1;
                      else if( m == 0 ) then ack( n - 1, 1 );
                      else                   ack( n - 1, ack( n, m - 1 ) );
                };
                y = ack( 3, 2 );
            }
        "
        out:"29"
    </> </>

    <lion_net_eval_frame_s>
        param: <lion_net_eval_param_s>
            name: "ADAPT (Vector)" verbosity: -1

            src:
            "
                cell( y <- a )
                {
                    adaptive v1 = ( 0.5 : 1.0 );
                    y = a~ ** v1;
                }
            "

            in: "( 1 : 2 )"
            out: "2.5"
        </>

    </>

    <lion_net_eval_frame_s>
        param: <lion_net_eval_param_s>
            name: "Frame adaptive" verbosity: -1 max_dev: 1E-4
            src:
            "
                ( y <- a )
                {
                    adaptive w = (3:1) : (2:1);
                    y = w ** a;
                };
            "
            in: "1:2"
            out:"5:4"
        </>
        jacobian_test: true
    </>

    <lion_net_eval_frame_s>
        param: <lion_net_eval_param_s>
            name: "Frame MLP" verbosity: -1 max_dev: 1E-4
            src:
            "
                cell ( y <- a )
                {
                    cell layer( y <- hidden_nodes, a )
                    {
                        adaptive w = random( hidden_nodes [ dimof( a ) [ # );
                        adaptive b = hidden_nodes [ 0;
                        q = w ** a + b;

                        adaptive c = 0.5;

                        // switch between activation functions
                        y = c * tanh( q ) + ( 1 - c ) * relu( q );
                    };

                    y =	layer( 1 ) <: layer( 16 ) <: layer( 16 ) <: layer( 16, a );
                }
            "
            in: "32[1"
            out:"1[-0.10596"
        </>
        jacobian_test: true
    </>


    <lion_net_eval_frame_s>
        param: <lion_net_eval_param_s>
            name: "Frame recurrent" verbosity: 10 max_dev: 1E-4
            src:
            "
                ( y <- a )
                {
                    recurrent r = 1;
                    r = a + r;
                    y = r;
                };
            "
            in: "1"
            out:"11"
        </>
        jacobian_test: false
        recurrent_cycles: 10
    </>


    </>
</>
