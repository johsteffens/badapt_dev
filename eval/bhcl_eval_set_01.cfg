<bhcl_eval_set_s>
    sig:       <st_s> "( y => a )" </>
    verbosity: <s2_t>-1            </>
    max_dev:   <f3_t>1e-08 </>
    arr: <bhcl_eval_arr_s>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "COPY"   </>
            src:  <st_s> "y = a;" </>
            in: <bhvm_hf3_adl_s> <st_s> "( ( 1 2 )( 3 4 ) )" </> </>
            out:<bhvm_hf3_adl_s> <st_s> "( ( 1 2 )( 3 4 ) )" </> </>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "SCALAR OPERATIONS" </>
            src:  <st_s> "y = exp( lgst( ( -( a - 3 ) * 5 * a + 5 ) + 16 ) + lgst( -1 ) );" </>
            in: <bhvm_hf3_adl_s> <st_s> "  4" </> </>
            out:<bhvm_hf3_adl_s> <st_s> "2.718281828" </> </>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "HTP OPERATIONS" </>
            src:  <st_s> "y = htp( htp( a ) );" </>
            in: <bhvm_hf3_adl_s> <st_s> "( ( 1 2 )( 3 4 ) )" </> </>
            out:<bhvm_hf3_adl_s> <st_s> "( ( 1 2 )( 3 4 ) )" </> </>
            //verbosity:<s2_t>5</>
        </>

        // ---------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ACKERMANN" </>  sig: <st_s> "( y => )" </>
            src:  <st_s>
            "
                cell ack( y => n, m )
                {
                    y =
                      if     ( n == 0 ) then m + 1;
                      else if( m == 0 ) then ack( n - 1, 1 );
                      else                   ack( n - 1, ack( n, m - 1 ) );
                };
                y = ack( 3, 2 );
            "
            </>
            out:<bhvm_hf3_adl_s> <st_s> "29" </> </>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (Scalar)" </>  sig:<st_s> "( y => a )" </>

            src:  <st_s>
            "
                w1 = adapt(  0.5 );
                w2 = adapt(  0.7 );
                w3 = adapt( -0.3 );
                y = tanh( lgst( w1 ) * tanh( w2 ) + lgst_leaky( w2 * w3 ) + a );
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "1" </> </>

            grad: <bhcl_eval_grad_s> epsilon:<f3_t>0.001</> out:<bhvm_hf3_adl_s> <st_s> "3" </> </>  max_dev:<f3_t>1e-02</> </>

            // verbosity:<s2_t>5</>
            max_dev:<f3_t>1e-08</>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (Vector)" </>  sig:<st_s> "( y => a )" </>

            src:  <st_s>
            "
                v1 = adapt( 0.5 1.0 );
                y = htp( a ) ** v1;
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "( 1 2 )" </> </>

            grad: <bhcl_eval_grad_s> epsilon:<f3_t>0.001</> out:<bhvm_hf3_adl_s> <st_s> "1" </> </>  max_dev:<f3_t>1e-02</> </>

            //verbosity:<s2_t>2</>
            max_dev:<f3_t>1e-08</>
        </>

        // ---------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (Vector,Mat)" </>  sig:<st_s> "( y => a )" </>

            src:  <st_s>
            "
                w1 = adapt( ( 1 2 ) ( -1 0 ) );
                v2 = ( 1 2 );
                y = htp( htp( w1 ** a ) ** v2 ) ** v2;
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "( ( 1 2 ) ( 1 2 ) )" </> </>

            grad: <bhcl_eval_grad_s> epsilon:<f3_t>0.001</> out:<bhvm_hf3_adl_s> <st_s> "1" </> </>  max_dev:<f3_t>1e-02</> </>

            //verbosity:<s2_t>2</>
            max_dev:<f3_t>1e-08</>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (Out Channels)" </>  sig:<st_s> "( y, z => a )" </>

            src:  <st_s>
            "
                verify_signature ( y, z => a );
                w1 = adapt : rand ( [dimof(a)][dimof(a)]# );
                v1 = adapt : rand ( [dimof(a)]# );
                y = htp( ( w1 + htp( w1 ) ) ** a ) ** v1;
                z = ( htp( a ) ** htp( w1 ) ) ** v1;
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "( 1 2 )" </> </>

            grad: <bhcl_eval_grad_s>
                epsilon:<f3_t>0.00001</>
                out:<bhvm_hf3_adl_s> <st_s> "1" </> <st_s> "1" </> </>
                max_dev:<f3_t>1e-02</>
            </>

            //verbosity:<s2_t>5</>

            max_dev:<f3_t>1e-08</>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (Mat*Mat)" </>  sig:<st_s> "( y, z => a )" </>

            src:  <st_s>
            "
                verify_signature ( y, z => a );

                dm = 4;
                w1 = adapt : rand ( [dm][dimof(a)]# );
                w2 = adapt : rand ( [dimof(a)][dm]# );
                v1 = adapt : rand ( [dm]# );
                y = htp( htp( w1 ** a ) ** v1 ) ** rand ( [dimof(a[0])]# );
                z = htp( ( htp( a ) ** htp( w1 ) ) ** v1 ) ** rand ( [dimof(a[0])]# );
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "(( 1 2 3 )( -1 -2 -3 ))" </> </>

            grad: <bhcl_eval_grad_s>
                epsilon:<f3_t>0.00001</>
                out:<bhvm_hf3_adl_s> <st_s> "1" </> <st_s> "1" </> </>
                max_dev:<f3_t>1e-02</>
            </>

            //verbosity:<s2_t>5</>

            max_dev:<f3_t>1e-08</>
        </>

/// --------------------------------------------------------------------------------------------------------------------

        <bhcl_eval_e2e_s>
            name: <st_s> "ADAPT (crazy)" </>  sig:<st_s> "( y, z => a )" </>

            src:  <st_s>
            "
                verify_signature( y, z => a );

                dimmid = 4;
                v1 = adapt : rand( [dimof(a)]# );
                v2 = adapt : rand( [dimmid  ]# );
                w1 = adapt :     ( [dimmid  ][dimof(a)]# );
                w2 = adapt : rand( [dimmid  ][dimof(a)]# );
                w3 = adapt : rand( [dimof(a)][dimmid  ]# );

                // some wild crazy operations with all adaptives
                y = htp( ( lgst( w1 ** a ) * tanh( htp( w3 ) ** a ) + v2 + lgst_leaky( w2 + w1 ) ** ( a - v1 ) ) ) ** rand( [dimmid]# );
                z = htp( ( lgst( w1 ** htp( w2 ) ** htp( w3 ) ) ** a ) ) ** rand( [dimmid]# );
            "
            </>

            in: <bhvm_hf3_adl_s> <st_s> "( 1 2 3 )" </> </>

            grad: <bhcl_eval_grad_s>
                epsilon:<f3_t>0.00001</>
                out:<bhvm_hf3_adl_s> <st_s> "-2" </> <st_s> "-2" </> </>
                max_dev:<f3_t>1e-02</>
            </>

            //verbosity:<s2_t>5</>

            max_dev:<f3_t>1e-08</>
        </>
    </>
</>
